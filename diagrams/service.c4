specification {

    element client
    element microservice
    element UI
    element system
    element message-broker

    relationship depends-on
    relationship uses {
        color red
        line dotted
        head diamond
        tail dot
    }

    color theme-color #050505
    color element-color #00739D
    color similar-element-color #010b0f

    tag deprecated
    tag jira-1234
    tag epic-3456

}

model {

    client customer 'Our Customer' {
        description 'This is the abc-company tenant'
        style {
            shape person
            color secondary
        }
    }

    atom-s = system {

        title 'ATOM-S'
        description '
        This is abc-company users authorization designer.
        It is used to provide the mechanism to authorize users using RBAC.'

        style {
            color sky
            // opacity 10%

        }

        UI atom-ui { // nested element

            #jira-1234 #epic-3456

            title 'Access Management'
            description 'Access Management Portal'
            technology 'React JS'
            link ssh://bastion.internal 'SSH'

            metadata {
                prop1 'value1'
                prop2 '
                        apiVersion: apps/v1
                        kind: StatefulSet
                        metadata:
                        name: app-statefulset
                        spec: {}
                    '
            }
            style {
                shape browser
                // icon https://icons.terrastruct.com/dev%2Freact.svg
                // icon tech:aarch64
                icon aws:lambda
                // icon gcp:service-discovery
                // icon azure:active-directory-connect-health
                // color similar-element-color
                color sky


            }
        }
        microservice atom-api { // nested element
            description '
                atom-api comprises of HTTP restful endpoints.
                It performs roles creation, assignment of roles,
                tenant onboarding etc.
            '

            style {
                color similar-element-color
                // color sky
            }

            .uses electron.eads {
                #jira-1234
                title 'HTTP call'
                description 'calls eads to store data in OPA system'
                technology 'HTTP/HTTPs'
            }
        }

        atom-ui -> atom-api "UI calls HTTP endpoints of atom-api" {
            style {
                color sky
                line solid
            }
        }

        // .uses electron // we can do this

        // atom-api -[depends-on]-> electron.eads // we can do this as well or provide .uses electron.eads within atom-api as well.
    }

    system electron {

        microservice eads {
            title 'eads Rest API'
            description 'Management api to feed electron OPA'
        }

        message-broker kafka {
            title 'Kafka'

            style {
                shape queue
            }
        }

        microservice opa {
            title 'electron OPA'
        }

        eads .uses kafka
        kafka -[uses]-> opa
    }

    // customer -> atom-ui "Customer interacting with atom-ui"
    customer -> atom-s.atom-ui "Customer interacting with atom-ui" // we can also do like this. Elements accessed using dot namespaced by parent.

}

views {
    view index {
        title 'Whole overview'
        include *
        autoLayout LeftRight 120 110
    }

    view of atom-s {

        // title 'My scoped view'
        include -> atom-s


        include -> atom-s.*  

        

        // include customer <-> atom-s.**
        // include *
        // include atom-api // element predicate
        // include atom-ui // element predicate
        
        // include atom-s
        // include atom-s.*

        // include atom-ui with {
        //     title 'UI for atom'
        //     icon tech:react-bootstrap
        // }



        include
            atom-api with {
                title 'Rest service for atom'
                icon tech:spring

                navigateTo view2
            }
        
        // include atom-api with {
        //     title 'Rest service for atom'
        //     icon tech:spring

        //     navigateTo view2
        // }

        // include atom-s.**

    }

    view view2 {

        group 'electron Components' {
            include electron.*

            include
                electron.opa with {
                    navigateTo example1 // pointing to dynamic view
                }
        }
    }

    view of electron {
        include *
    }


    view
    dynamic view example1 {
        title 'My specific usecase1'

        customer -> atom-api {
            notes '
                This is the usecase when customers can directly call the atom-apis.
                For example, it can called for integrating IGA systems with atom.
            '

            navigateTo example2
        }

        customer <- atom-api 'returns JSON'


    }

    view
    dynamic view example2 {
        title 'My specific usecase2'

        parallel {

            customer -> atom-api {
                notes '
                This is the usecase when customers can directly call the atom-apis.
                For example, it can called for integrating IGA systems with atom.
            '
            }

            customer -> atom-ui
        }
    }
}

    